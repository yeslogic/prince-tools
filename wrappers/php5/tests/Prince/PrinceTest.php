<?php
namespace Prince;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-02-20 at 18:35:34.
 */
class PrinceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Prince object
     */
    protected $object;

    /**
     * @var Path to Prince binary
     */
    protected $path_to_binary;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // Allow configuration for testing via environment variables
        $this->path_to_binary = isset($_ENV['PRINCE_BINARY_PATH']) ? $_ENV['PRINCE_BINARY_PATH'] : false;
        if (!$this->path_to_binary) {
            $this->path_to_binary = '/usr/local/bin/prince';
        }

        $this->object = new Prince($this->path_to_binary);
        $this->object->setLog('/tmp/prince.log');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Prince\Prince::addStyleSheet
     */
    public function testAddStyleSheet()
    {
        $this->object->addStyleSheet('./fixtures/stylesheet.css');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('styleSheets');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('-s "./fixtures/stylesheet.css" ', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::clearStyleSheets
     */
    public function testClearStyleSheets()
    {
        $this->object->addStyleSheet('./fixtures/stylesheet.css');
        $this->object->clearStyleSheets();
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('styleSheets');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::addScript
     */
    public function testAddScript()
    {
        $this->object->addScript('./fixtures/javascript.js');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('scripts');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('--script "./fixtures/javascript.js" ', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::clearScripts
     */
    public function testClearScripts()
    {
        $this->object->addScript('./fixtures/javascript.js');
        $this->object->clearScripts();
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('scripts');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::addFileAttachment
     */
    public function testAddFileAttachment()
    {
        $this->object->addFileAttachment('./fixtures/file.csv');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('fileAttachments');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('--attach="./fixtures/file.csv" ', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::clearFileAttachments
     */
    public function testClearFileAttachments()
    {
        $this->object->addFileAttachment('./fixtures/file.csv');
        $this->object->clearFileAttachments();
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('fileAttachments');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setLicenseFile
     */
    public function testSetLicenseFile()
    {
        $this->object->setLicenseFile('./fixtures/liscense_file');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('licenseFile');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('./fixtures/liscense_file', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setLicenseKey
     */
    public function testSetLicenseKey()
    {
        $this->object->setLicenseKey('./fixtures/liscense_key');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('licenseKey');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('./fixtures/liscense_key', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setInputType
     */
    public function testSetInputType()
    {
        $this->object->setInputType('html');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('inputType');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('html', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setJavaScript
     */
    public function testSetJavaScript()
    {
        $this->object->setJavaScript(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('javascript');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setHTML
     */
    public function testSetHTML()
    {
        $this->object->setHTML(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('inputType');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('html', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setVerbose
     */
    public function testSetVerbose()
    {
        $this->object->setVerbose(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('verbose');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setLog
     */
    public function testSetLog()
    {
        $this->object->setLog('./fixtures/debug.log');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('logFile');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('./fixtures/debug.log', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setBaseURL
     */
    public function testSetBaseURL()
    {
        $this->object->setBaseURL('http://example.org');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('baseURL');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('http://example.org', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setXInclude
     */
    public function testSetXInclude()
    {
        $this->object->setXInclude(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('doXInclude');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setHttpUser
     */
    public function testSetHttpUser()
    {
        $this->object->setHttpUser('guest');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('httpUser');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('guest', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setHttpPassword
     */
    public function testSetHttpPassword()
    {
        $this->object->setHttpPassword('abc123');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('httpPassword');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('abc123', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setHttpProxy
     */
    public function testSetHttpProxy()
    {
        $this->object->setHttpProxy('http://example.com:8080/');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('httpProxy');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('http://example.com:8080/', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setInsecure
     */
    public function testSetInsecure()
    {
        $this->object->setInsecure(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('insecure');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setFileRoot
     */
    public function testSetFileRoot()
    {
        $this->object->setFileRoot('/tmp/');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('fileRoot');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('/tmp/', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setEmbedFonts
     */
    public function testSetEmbedFonts()
    {
        $this->object->setEmbedFonts(false);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('embedFonts');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(false, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setSubsetFonts
     */
    public function testSetSubsetFonts()
    {
        $this->object->setSubsetFonts(false);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('subsetFonts');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(false, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setArtificialFonts
     */
    public function testSetArtificialFonts()
    {
        $this->object->setArtificialFonts(false);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('artificialFonts');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(false, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setCompress
     */
    public function testSetCompress()
    {
        $this->object->setCompress(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('compress');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setPDFTitle
     */
    public function testSetPDFTitle()
    {
        $this->object->setPDFTitle('A Test Title');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('pdfTitle');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('A Test Title', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setPDFSubject
     */
    public function testSetPDFSubject()
    {
        $this->object->setPDFSubject('An Example PDF');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('pdfSubject');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('An Example PDF', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setPDFAuthor
     */
    public function testSetPDFAuthor()
    {
        $this->object->setPDFAuthor('John Doe');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('pdfAuthor');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('John Doe', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setPDFKeywords
     */
    public function testSetPDFKeywords()
    {
        $this->object->setPDFKeywords('pdf, princexml, test');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('pdfKeywords');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('pdf, princexml, test', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setPDFCreator
     */
    public function testSetPDFCreator()
    {
        $this->object->setPDFCreator('PrinceXML v9.0');
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('pdfCreator');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals('PrinceXML v9.0', $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setEncrypt
     */
    public function testSetEncrypt()
    {
        $this->object->setEncrypt(true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('encrypt');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(true, $reflectionProperty->getValue($this->object));
    }

    /**
     * @covers Prince\Prince::setEncryptInfo
     */
    public function testSetEncryptInfo()
    {
        $this->object->setEncryptInfo(40, 'password', 'superpassword', true, true, true, true);
        $reflection = new \ReflectionClass($this->object);
        $reflectionProperty = $reflection->getProperty('encryptInfo');
        $reflectionProperty->setAccessible(true);

        $this->assertEquals(
            ' --key-bits 40 --user-password="password" --owner-password="superpassword"' .
            ' --disallow-print --disallow-modify --disallow-copy --disallow-annotate ',
            $reflectionProperty->getValue($this->object)
        );
    }

    /**
     * @covers Prince\Prince::convert_file
     */
    public function testConvert_file()
    {
        $this->checkBinary();

        $this->object->convert_file('./tests/Prince/fixtures/document.html');

        $this->assertFileExists('./tests/Prince/fixtures/document.pdf');
        $this->assertGreaterThan(0, filesize('./tests/Prince/fixtures/document.pdf'));
        unlink('./tests/Prince/fixtures/document.pdf');
    }

    /**
     * @covers Prince\Prince::convert_file_to_file
     */
    public function testConvert_file_to_file()
    {
        $this->checkBinary();

        $this->object->convert_file_to_file(
            './tests/Prince/fixtures/document.html',
            './tests/Prince/fixtures/document-renamed.pdf'
        );

        $this->assertFileExists('./tests/Prince/fixtures/document-renamed.pdf');
        $this->assertGreaterThan(0, filesize('./tests/Prince/fixtures/document-renamed.pdf'));
        unlink('./tests/Prince/fixtures/document-renamed.pdf');
    }

    /**
     * @covers Prince\Prince::convert_multiple_files
     */
    public function testConvert_multiple_files()
    {
        $this->checkBinary();

        $files = array(
            './tests/Prince/fixtures/document.html',
            './tests/Prince/fixtures/document-2.html'
        );
        $this->object->convert_multiple_files($files, './tests/Prince/fixtures/document-consolidated.pdf');

        $this->assertFileExists('./tests/Prince/fixtures/document-consolidated.pdf');
        $this->assertGreaterThan(0, filesize('./tests/Prince/fixtures/document-consolidated.pdf'));
        unlink('./tests/Prince/fixtures/document-consolidated.pdf');
    }

    /**
     * @covers Prince\Prince::convert_multiple_files_to_passthru
     */
    public function testConvert_multiple_files_to_passthru()
    {
        $this->checkBinary();

        $files = array(
            './tests/Prince/fixtures/document.html',
            './tests/Prince/fixtures/document-2.html'
        );
        $this->object->convert_multiple_files_to_passthru($files);

        $this->expectOutputRegex('/.{100,}/');
    }

    /**
     * @covers Prince\Prince::convert_file_to_passthru
     */
    public function testConvert_file_to_passthru()
    {
        $this->checkBinary();

        $this->object->convert_file_to_passthru('./tests/Prince/fixtures/document.html');

        $this->expectOutputRegex('/.{100,}/');
    }

    /**
     * @covers Prince\Prince::convert_string_to_passthru
     */
    public function testConvert_string_to_passthru()
    {
        $this->checkBinary();

        $string = file_get_contents('./tests/Prince/fixtures/document.html');
        $this->object->convert_string_to_passthru($string);

        $this->expectOutputRegex('/.{100,}/');
    }

    /**
     * @covers Prince\Prince::convert_string_to_file
     */
    public function testConvert_string_to_file()
    {
        $this->checkBinary();

        $string = file_get_contents('./tests/Prince/fixtures/document.html');
        $this->object->convert_string_to_file($string, './tests/Prince/fixtures/document.pdf');

        $this->assertFileExists('./tests/Prince/fixtures/document.pdf');
        $this->assertGreaterThan(0, filesize('./tests/Prince/fixtures/document.pdf'));
        unlink('./tests/Prince/fixtures/document.pdf');
    }

    /* Private Methods */

    /**
     * Checks if the Prince binary is available
     */
    private function checkBinary() {
        if (!file_exists($this->path_to_binary)) {
            $this->markTestSkipped('Cannot load Prince binary to test this method.');
        }
        if (!is_executable($this->path_to_binary)) {
            $this->markTestSkipped('Found Prince binary, but it cannot be executed.');
        }
    }
}
